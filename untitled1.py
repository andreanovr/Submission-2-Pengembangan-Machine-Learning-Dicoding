# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IJnnd6zMseIXbu5sYjunVem_reI1i5eI
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

df = pd.read_csv('sample_data/database.csv',index_col='Date')
df

df.isnull().sum()

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[1:]))
    return ds.batch(batch_size).prefetch(1)

df.head()

train_dataset = df.sample(frac=0.8,random_state=0).astype(float)
test_dataset = df.astype(float)

train_labels = train_dataset.pop('Latitude').astype(float).values
test_labels = test_dataset.pop('Latitude').astype(float).values

train_dataset = train_dataset.values[:, np.newaxis]
train_dataset.ndim

# train_set = windowed_dataset(train_labels, window_size=60, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=['mae', 'mse'])

history = model.fit(
    train_dataset,
    train_labels, 
    epochs=500, 
    batch_size=64, 
    validation_split=0.2,
    shuffle=False,
)